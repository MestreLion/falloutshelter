#!/usr/bin/env python3
#
# Foshelter - Tools for manipulating Fallout Shelter save data
# <https://github.com/MestreLion/foshelter>
#
#    Copyright (C) 2018 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>

"""
    Demo script for Foshelter features
"""

import sys
import os.path
import logging
import datetime
import zipfile

import argh

import foshelter as fs


PROJNAME = 'foshelter'
DATADIR = os.path.join(os.path.dirname(__file__), 'data')

log = logging.getLogger(PROJNAME)


def decrypt(src: str, dst: str, pretty_print=False, sort_keys=False):
    """Decrypt `src` SAV file to `dst` JSON"""

    with open(src, 'rb') as fd:
        data = fd.read()

    try:
        data = fs.encode(fs.decrypt(data), pretty_print, sort_keys)
    except ValueError as e:
        raise fs.FSException(
            'Could not decrypt data, is it an encrypted SAV file? %s: %s',
            src, e
        )

    with open(dst, 'w') as fd:
        fd.write(data)


def encrypt(src: str, dst: str):
    """Encrypt `src` JSON file to `dst` save game file"""
    with open(src, 'r') as fd:
        data = fd.read()

    try:
        data = fs.encrypt(fs.decode(data))
    except ValueError as e:
        raise fs.FSException(
            'Could not encrypt data, is it a decrypted JSON file? %s: %s',
            src, e
        )

    with open(dst, 'wb') as fd:
        fd.write(data)


def backup(slot: int, target=None, **options) -> str:
    """
    Backup a game slot file to target, using `options` from config file.
    `target` path can be a directory, file, or blank. Current directory
    and save file basename, such as 'Vault1.sav', will be used if needed
    Return saved local file path
    """
    opts = fs.get_options()
    opts.update(options.copy())

    platform = opts['main'].get('platform', '').lower()

    if platform == 'android':
        return fs.android.backup(slot, target, **opts)

    source = os.path.join(fs.settings.savepath(**opts), fs.util.savename(slot))
    target = fs.util.localpath(slot, target)
    return fs.util.copy_file(source, target)


def backup_all(target: str = None, archive: bool = True, **options) -> str:
    """Backup all game slots to `target` path directory"""
    if target and not os.path.isdir(target):
        raise fs.FSException("Target path is not a directory: %s", target)

    files = []
    for slot in (1, 2, 3):
        files.append(backup(slot, target, **options))

    if archive:
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S")
        zippath = os.path.join(target or "", 'saves_{0}.zip'.format(now))
        with zipfile.ZipFile(zippath, mode='x') as zfd:  # x = create only
            for savefile in files:
                zfd.write(savefile)
        return zippath

    return target or "."


def e17info(path: str, decrypted: bool = False):
    """Dweller statistics based on my personal dweller naming convention"""
    game = fs.Game.from_save(path, decrypted)
    print('\t'.join((
        'BadInfo',
        ' ID',
        'Level',
        'MaxHP',
        'E17Real',
        'E17Info',
        'Job',
        'New',
        'Full Name',
    )))
    for d in game.dwellers:
        print('\t'.join((
            '{0.badinfo}',
            '{0.ID:3d}',
            '{0.level:2d}',
            '{0.hp:.1f}',
            '{0.erating:4.1f}',
            '{0.e17info:4.1f}',
            '{0.job}',
            '{0.newcomer}',
            '{0.name}',
        )).format(d))


def demo(source: str, destination: str = None, decrypted: bool = False):
    """Library features demo"""

    # Load from encrypted SAV or decrypted JSON files
    game = fs.Game.from_save(source, decrypted)

    # Dwellers is a special container with full list capabilities
    # Each Dweller in the list is also a fully featured instance of a class
    for dweller in game.dwellers[2:5]:
        print(repr(dweller), dweller)

    # Give yourself a little gift... LunchBox is an Enum in a container
    game.lunchboxes.extend((fs.LunchBox.STARTER_PACK,) * 3)

    # You only believe in what you see?
    for box in game.lunchboxes:
        print(box)

    if destination:
        # Either Encrypted SAV or Decrypted JSON with PrettyPrint and SortKeys
        opts = (decrypted,) * 3
        game.to_save(destination, *opts)



def test(source: str, dest: str, target: str, decrypted: bool = False):
    """Run whatever I'm currently testing on development"""
    game = fs.Game.from_save(source, decrypted)

    opts = (decrypted,) * 3

    for item in game.lunchboxes:
        print(item, repr(item))

    for box in fs.game.LunchBox:
        game.lunchboxes.append(box)

    game.to_save(dest, *opts)

    game.lunchboxes.pop()
    del game.lunchboxes[-2]

    game.to_save(target, *opts)




def _main(argv=None):  # @UnusedVariable
    fs.util.setup_logging(logging.INFO)
    argh.dispatch_commands([backup, backup_all, e17info,
                            test, encrypt, decrypt, demo])




if __name__ == '__main__':
    try:
        sys.exit(_main(sys.argv[1:]))
    except (fs.FSException, FileNotFoundError) as e:
        log.error(e)
    except (KeyboardInterrupt, BrokenPipeError):
        pass
